name: Deploy eVote POC AWS Resources

on:
    push:
      branches:
        - main
      paths:
        - '.github/workflows/terraform-deploy.yml'
        - 'app/terraform/**'
  
env:
    # verbosity setting for Terraform logs
    TF_LOG: INFO
    # Credentials for deployment to AWS
    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  
  
jobs:
    terraform:
      name: 'Terraform Infrastructure Change Management Pipeline'
      runs-on: ubuntu-latest
  
      defaults:
        run:
          shell: bash
          working-directory: ./terraform
  
      steps:
        - uses: actions/checkout@v4
  
        - name: Configure AWS Credentials for GitHub Actions
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ap-southeast-1
  
        # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v3
          with:
            terraform_version: 1.5.6
  
        - name: Terraform Init
          run: terraform init
  
        - name: Terraform Format
          run: terraform fmt -check
  
        - name: Terraform Validate
          run: terraform validate
  
        - name: Terraform Plan
          id: plan
          if: github.event_name == 'push'
          run: terraform plan -input=false
  
        # Exit if terraform plan fails
        - name: Terraform Plan Exit Conditional
          if: steps.plan.outcome == 'failure'
          run: exit 1
  
        # On push to main, build or change infrastructure according to Terraform configuration files
        - name: Terraform Apply
          if: github.ref == 'refs/heads/main' && github.event_name == 'push'
          run: terraform apply -auto-approve -input=false