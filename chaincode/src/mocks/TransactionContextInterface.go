// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	cid "github.com/hyperledger/fabric-chaincode-go/pkg/cid"

	mock "github.com/stretchr/testify/mock"

	shim "github.com/hyperledger/fabric-chaincode-go/shim"
)

// TransactionContextInterface is an autogenerated mock type for the TransactionContextInterface type
type TransactionContextInterface struct {
	mock.Mock
}

// GetClientIdentity provides a mock function with given fields:
func (_m *TransactionContextInterface) GetClientIdentity() cid.ClientIdentity {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetClientIdentity")
	}

	var r0 cid.ClientIdentity
	if rf, ok := ret.Get(0).(func() cid.ClientIdentity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cid.ClientIdentity)
		}
	}

	return r0
}

// GetStub provides a mock function with given fields:
func (_m *TransactionContextInterface) GetStub() shim.ChaincodeStubInterface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStub")
	}

	var r0 shim.ChaincodeStubInterface
	if rf, ok := ret.Get(0).(func() shim.ChaincodeStubInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(shim.ChaincodeStubInterface)
		}
	}

	return r0
}

// NewTransactionContextInterface creates a new instance of TransactionContextInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionContextInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionContextInterface {
	mock := &TransactionContextInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
